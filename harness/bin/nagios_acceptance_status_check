#!/usr/bin/env python3

"""
-------------------------------------------------------------------------------
File:   nagios_acceptance_status_check
Author: Wayne Joubert (joubert@ornl.gov)
National Center for Computational Sciences, Scientific Computing Group.
Oak Ridge National Laboratory
Copyright (C) 2016 Oak Ridge National Laboratory, UT-Battelle, LLC.
-------------------------------------------------------------------------------
"""

import sys

from libraries.status_database import StatusDatabase
from libraries.status_file import StatusFile

CODE_GREEN = 0
CODE_YELLOW = 1
CODE_RED = 2
CODE_UNKNOWN = 2

NO_VALUE = StatusFile.NO_VALUE

#------------------------------------------------------------------------------

def report_to_nagios(code, message):
    """Report result to Nagios.  NOTE: this function has no return."""

    print(message)
    sys.exit(code)

#------------------------------------------------------------------------------

def check_num_recently_completed_jobs(sdb):
    """Check that the number of recently completed jobs is high enough."""

    yellow_message = None

    for interval, tol_red, tol_yellow in [
        ('1 day', 40, 30)]:

        query_string = (
            'SELECT check_end_job_status '
            'FROM test_instances '
            'WHERE check_end_job_status IS NOT \'' + NO_VALUE + '\' '
              'AND datetime(check_end_event_time) '
               'BETWEEN datetime(\'now\', \'-' + interval + '\') AND '
                       'datetime(\'now\') '
            'ORDER BY check_end_event_time DESC'

        query_result = sdb.query(query_string)

        count = len(query_result.split('\n'))

        if count < tol_red:
            message = (
                'Number of completed jobs over last %s period is %i, '
                'below hard limit of %i' % (interval, count, tol_red))
            report_to_nagios(CODE_RED, message)
    
        if count < tol_yellow:
            #---Remember this finding, but keep checking for red conditions.
            yellow_message = (
                'Number of completed jobs over last %s period is %i, '
                'below soft limit of %i' % (interval, count, tol_yellow))

    return yellow_message

#------------------------------------------------------------------------------

def check_num_recently_failed_jobs(sdb):
    """Check that the number of recently failed jobs is low enough."""

    yellow_message = None



    return yellow_message

#------------------------------------------------------------------------------

def check_num_completed_jobs_since_last passed_job(sdb):
    """
    """

    yellow_message = None



    return yellow_message

#------------------------------------------------------------------------------

def check_num_jobs_in_queue(sdb):
    """
    """

    yellow_message = None



    return yellow_message

#------------------------------------------------------------------------------

def main():
    """Do an acceptance testing status check andf present result in
       a manner suitable to be picked up by Nagios.
    """

    sdb = StatusDatabase().load()

    yellow_message = None

    yellow_message_this = check_num_recently_completed_jobs(sdb)
    if yellow_message_this:
        yellow_message = yellow_message_this

    yellow_message_this = check_num_recently_failed_jobs(sdb)
    if yellow_message_this:
        yellow_message = yellow_message_this

    yellow_message_this = check_num_completed_jobs_since_last passed_job(sdb)
    if yellow_message_this:
        yellow_message = yellow_message_this

    yellow_message_this = check_num_jobs_in_queue(sdb)
    if yellow_message_this:
        yellow_message = yellow_message_this

    #---If found a yellow condition, then report it now.

    if yellow_message:
        report_to_nagios(CODE_YELLOW, yellow_message)

    report_to_nagios(CODE_GREEN, 'No hazard conditions detected')

#------------------------------------------------------------------------------

if __name__ == "__main__":
    main()

#------------------------------------------------------------------------------
